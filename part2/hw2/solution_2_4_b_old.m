randn('state',6); % set state so problem is reproducable
% example is
% C:\! Convex_Optimization\ConvexOptimizationII\materials\lsocoee364b\02-subgrad_method_matlab\subgrad_method_pwl_speedup.m
% (2 points) Let J = 15, n = 10, m = 200 and  = 1
J = 15;
n = 10;
m = 200;
lambda = 1;

% Generate random matrices A1; : : : ;AJ in R^{mx n} with independent Gaussian entries 
% with mean 0 and variance 1/m
A = sqrt(1 / m) * randn([m, n, J]);
% x = sqrt(1 / n) * randn([n, J]);
x = sqrt(1 / n) * randn([n, J]);
% b = zeros([m,1])
fprintf('size A = '); size(A)
fprintf('size x = '); size(x)


A1 = A(:, :, 1);
x1 = x(:, 1);
s = A1 * x1;

fprintf('size of s = ')
size(s)

% https://stackoverflow.com/questions/6580656/matlab-how-to-vector-multiply-two-arrays-of-matrices?lq=1
% then set b = PJ j=1 Axj .
b = zeros([m, 1]);
for k = 1:J
    b = b + A(:, :, k) * x(:, k);
end

fprintf('size of b = ')
size(b)


% find the optimal value of f using cvx:

cvx_begin
 variable x_min(n, J)

 minimize( 0.5 * pow_pos(norm(b - A(:, :, 1) * x_min(:, 1) - ...  
     A(:, :, 2) * x_min(:, 2) - ...
     A(:, :, 3) * x_min(:, 3) - ...
     A(:, :, 4) * x_min(:, 4) - ...
     A(:, :, 5) * x_min(:, 5)...
     - A(:, :, 6) * x_min(:, 6)...
     - A(:, :, 7) * x_min(:, 7)...
     - A(:, :, 8) * x_min(:, 8)...
     - A(:, :, 9) * x_min(:, 9)...
     - A(:, :, 10) * x_min(:, 10)...
     - A(:, :, 11) * x_min(:, 11)...
     - A(:, :, 12) * x_min(:, 12)...
     - A(:, :, 13) * x_min(:, 13)...
     - A(:, :, 14) * x_min(:, 14)...
     - A(:, :, 15) * x_min(:, 15)...
 , 2), 2) + lambda * (norm(x_min(:, 1), 2)...
 + norm(x_min(:, 2), 2)...
 + norm(x_min(:, 3), 2)...
 + norm(x_min(:, 4), 2)...
 + norm(x_min(:, 5), 2)...
 + norm(x_min(:, 6), 2)...
 + norm(x_min(:, 7), 2)...
 + norm(x_min(:, 8), 2)...
 + norm(x_min(:, 9), 2)...
 + norm(x_min(:, 10), 2)...
 + norm(x_min(:, 11), 2)...
 + norm(x_min(:, 12), 2)...
 + norm(x_min(:, 13), 2)...
 + norm(x_min(:, 14), 2)...
 + norm(x_min(:, 15), 2)...
))
cvx_end




